{"version":3,"sources":["App.js","index.js"],"names":["Display","countries","search","filteredList","filter","v","name","toLocaleLowerCase","includes","ctr","map","i","capital","population","languages","l","key","src","flag","alt","width","height","App","useEffect","console","log","axios","get","then","response","setCountries","data","useState","setSearch","value","onChange","event","target","ReactDOM","render","document","getElementById"],"mappings":"mNAIMA,EAAU,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,OAE1B,GAAe,KAAXA,EACA,OAAO,KAKP,IAAMC,EAAeF,EAAUG,QAAO,SAAAC,GAElC,OAA4E,IAAtEA,EAAEC,KAAMC,oBAAqBC,SAASN,EAAOK,wBAUnDE,EAAM,EAEV,GADAN,EAAaO,KAAI,SAACL,EAAGM,GAAJ,OAAUF,GAAO,KAC9BA,EAAM,GACN,OACI,yEAKH,GAAY,IAARA,EAAW,CAChB,IAAIJ,EAAIF,EAAa,GAErB,OACI,6BACI,4BAAKE,EAAEC,MADX,YAEcD,EAAEO,QACZ,6BAHJ,eAIiBP,EAAEQ,WACf,6BACA,yCACA,4BACMR,EAAES,UAAWJ,KAAI,SAACK,EAAGJ,GAAJ,OAAU,wBAAIK,IAAKL,GAAT,IAAeI,EAAET,KAAjB,SAEjC,6BACA,yBAAKW,IAAKZ,EAAEa,KAAMC,IAAI,yCAAyCC,MAAO,IAAKC,OAAQ,OAI1F,GAAY,IAARZ,EAAW,CAChB,IAAIJ,EAAIF,EAAa,GAErB,OACI,6BACI,4BAAKE,EAAEC,MADX,YAEcD,EAAEO,QACZ,6BAHJ,eAIiBP,EAAEQ,WACf,6BACA,yCACA,4BACMR,EAAES,UAAWJ,KAAI,SAACK,EAAGJ,GAAJ,OAAU,wBAAIK,IAAKL,GAAT,IAAeI,EAAET,KAAjB,SAEjC,6BACA,yBAAKW,IAAKZ,EAAEa,KAAMC,IAAI,yCAAyCE,OAAQ,OAM/E,OACI,6BACKlB,EAAaO,KAAI,SAACL,EAAGM,GAClB,OACI,yBAAKK,IAAKL,GACLN,EAAEC,WA0CpBgB,EAhCH,WAERC,qBAAU,WACNC,QAAQC,IAAI,UACZC,IACKC,IAAI,mGACJC,MAAK,SAAAC,GACFL,QAAQC,IAAI,qBAEZK,EAAaD,EAASE,WAE/B,IAXW,MAaoBC,mBAAS,IAb7B,mBAaP/B,EAbO,KAaI6B,EAbJ,OAecE,mBAAS,IAfvB,mBAeP9B,EAfO,KAeC+B,EAfD,KAqBd,OACI,6BACI,+CACmB,2BAAOC,MAAOhC,EAAQiC,SARtB,SAACC,GACxBH,EAAUG,EAAMC,OAAOH,WASnB,kBAAC,EAAD,CAASjC,UAAWA,EAAWC,OAAQA,MC5GnDoC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.a3ca3012.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n\nconst Display = ({ countries, search }) => {\n\n    if (search === '') {\n        return null\n    }\n    else {\n\n\n        const filteredList = countries.filter(v => {\n\n            if (((v.name).toLocaleLowerCase()).includes(search.toLocaleLowerCase()) === true)\n                return true\n            else\n                return false\n\n        })\n\n\n\n\n        let ctr = 0\n        filteredList.map((v, i) => ctr += 1)\n        if (ctr > 10) {\n            return (\n                <div>\n                    Too many matches, specify another filter\n                </div>\n            )\n        }\n        else if (ctr === 1) {\n            let v = filteredList[0]\n\n            return (\n                <div>\n                    <h1>{v.name}</h1>\n                    Capital: {v.capital}\n                    <br />\n                    Population: {v.population}\n                    <br />\n                    <h3>languages</h3>\n                    <ul>\n                        {(v.languages).map((l, i) => <li key={i} > {l.name} </li>)}\n                    </ul>\n                    <br />\n                    <img src={v.flag} alt=\"Country Flag should be displayed here.\" width={400} height={200} />\n                </div>\n            )\n        }\n        else if (ctr === 2) {\n            let v = filteredList[1]\n\n            return (\n                <div>\n                    <h1>{v.name}</h1>\n                    Capital: {v.capital}\n                    <br />\n                    Population: {v.population}\n                    <br />\n                    <h3>languages</h3>\n                    <ul>\n                        {(v.languages).map((l, i) => <li key={i} > {l.name} </li>)}\n                    </ul>\n                    <br />\n                    <img src={v.flag} alt=\"Country Flag should be displayed here.\" height={200} />\n                </div>\n            )\n        }\n        else {\n\n            return (\n                <div>\n                    {filteredList.map((v, i) => {\n                        return (\n                            <div key={i} >\n                                {v.name}\n                            </div>\n                        )\n                    })}\n                </div>\n            )\n        }\n    }\n}\n\nconst App = () => {\n\n    useEffect(() => {\n        console.log('effect')\n        axios\n            .get('https://restcountries.eu/rest/v2/all?fields=name;capital;population;languages;flag;altSpellings')\n            .then(response => {\n                console.log('promise fulfilled')\n\n                setCountries(response.data)\n            })\n    }, [])\n\n    const [countries, setCountries] = useState([])\n\n    const [search, setSearch] = useState('')\n    const handleSearchChange = (event) => {\n        setSearch(event.target.value)\n    }\n\n\n    return (\n        <div>\n            <div>\n                find countries <input value={search} onChange={handleSearchChange} />\n            </div>\n            <Display countries={countries} search={search} />\n\n        </div>\n    )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}